import os
from xml.dom.minidom import parse

from openpyxl import Workbook
import pandas as pd


def remove_numbers(directory):
    """Remove numbers and dashes before svg names"""
    for filename in os.listdir(directory):
        new_filename = os.path.join("country_flags", filename[4:])
        os.rename(os.path.join("country_flags", filename), new_filename)


def flag_list(directory):
    """Make an Excel file with English country names and filenames
    from a directory with country flags in svg.
    """
    # Index excel file initialisation
    wb = Workbook()
    ws1 = wb.active
    ws1.append(["Country", "Filename"])

    for filename in os.listdir(directory):
        country = filename[:-4].replace("-", " ").capitalize()
        ws1.append(
            [
                country,
                filename,
            ]
        )

    wb.save(filename="country_flags.xlsx")


def nature_list(directory):
    """Make an Excel file with nature elements names and filenames
    from a directory with nature elements svg files.
    """
    # Index excel file initialisation
    wb = Workbook()
    ws1 = wb.active
    ws1.append(["Nature element", "Filename"])

    for filename in os.listdir(directory):
        element = filename[:-4].replace("_", " ").capitalize()
        ws1.append(
            [
                element,
                filename,
            ]
        )

    wb.save(filename="nature.xlsx")


def replace_text(node, newText):
    """Replace node inner text when using minidom"""
    if node.firstChild.nodeType != node.TEXT_NODE:
        raise Exception("node does not contain text")

    node.firstChild.replaceWholeText(newText)


def get_element_by_id(node_list, id):
    """Get element by id using minidom

    node_list -- a node list in which to search, generally from
    getElementsByTagName()
    id -- the id to search
    """
    for node in node_list:
        if node.getAttribute("id") == id:
            return node


def add_style(style_attribute_string, property, value):
    """Add css property and value to a svg style attribute or modify
    it if it already exists

    return a modified style attribute string that cand be injected in
    the element with setAttribute('style', new_attribute_string)

    style_attribute_string -- the value of the style attribute of the
    element, from getAttribute('style')
    property -- css property to set
    value -- css value to set
    """
    # Create a list of css tuples (property, value)
    style_list = [
        (i.split(":")[0], i.split(":")[1]) for i in style_attribute_string.split(";")
    ]
    # Turn the list into a dictionary
    styles = {key: value for (key, value) in style_list}
    # Set the value of the property in the dict
    styles[property] = value
    # Make the new style attibute string from the dict
    new_style_list = [str(i[0]) + ":" + str(i[1]) for i in styles.items()]
    new_style_attribute_string = ""

    for style in new_style_list:
        new_style_attribute_string += style
        new_style_attribute_string += ";"

    # Remove last ';'
    if new_style_attribute_string:
        new_style_attribute_string = new_style_attribute_string[:-1]

    return new_style_attribute_string


def generate_svg_markers(
    excel_filename,
    sheet_name,
    flags_dir,
    icons_dir,
    lock_patterns_dir,
    template_filename,
):
    """Generate orienteering markers as svg files from Excel file

    An orienteering marker is a 8cm by 8cm square svg with:
    - an "android like" lock pattern in the middle
    - a famous athlete name on the upper left corner
    - a country flag and the corresponding 3 letters code on the left
    - an animal or a plant on the lower left corner
    - the marker number on the upper right corner
    - a random number on the right
    There is 5 different color for the markers (corresponding to the
    areas where it will be put)
    All of these data are aggregated in an excel file. The markers
    are generated by modifying a svg template

    excel_filename -- The excel file name
    sheet_name -- the sheet name where the relevant data are
    flags_dir -- the directory with country flags svg files
    icons_dir -- the directory with animals and plants svg files
    lock_patterns_dir -- the directory with lock patterns svg files
    template_filename -- the name of the svg template
    """

    df = pd.read_excel(excel_filename, sheet_name=sheet_name)

    template = parse(template_filename)
    rootNode = template.documentElement

    # Getting all the DOM elements that will be modified in the for loop
    control_number_element = get_element_by_id(
        rootNode.getElementsByTagName("tspan"), "tspan80704"
    )
    layer_1 = get_element_by_id(rootNode.getElementsByTagName("g"), "layer1")
    triangle = get_element_by_id(rootNode.getElementsByTagName("path"), "path1159")
    lock_pattern_frame_element = get_element_by_id(
        rootNode.getElementsByTagName("rect"), "rect19865"
    )
    country_code_element = get_element_by_id(
        rootNode.getElementsByTagName("tspan"), "tspan7507"
    )
    country_code_text_element = get_element_by_id(
        rootNode.getElementsByTagName("text"), "text1730-2"
    )
    country_flag_element = get_element_by_id(
        rootNode.getElementsByTagName("g"), "g8192"
    )
    athlete_fistname_element = get_element_by_id(
        rootNode.getElementsByTagName("tspan"), "tspan23323"
    )
    athlete_lastname_element = get_element_by_id(
        rootNode.getElementsByTagName("tspan"), "tspan24647"
    )
    icon_container_element = get_element_by_id(
        rootNode.getElementsByTagName("g"), "g46895"
    )
    addition_element = get_element_by_id(
        rootNode.getElementsByTagName("tspan"), "tspan43331"
    )

    # Create "out" directory if it don't already exists
    if not os.path.exists("out"):
        os.mkdir("out")

    # Create "svg" directory if it don't already exists
    svg_dir_path = os.path.join("out", "svg")
    if not os.path.exists(svg_dir_path):
        os.mkdir(svg_dir_path)

    for ind in df.index:
        color = df["Couleur hexa"][ind]
        control_number = df["Numero balise"][ind]
        lock_pattern_filename = df["Shema"][ind]
        icon_filename = df["Faune et flore"][ind]
        addition = df["Addition"][ind]
        athlete_firstname = df["Prenom sportifs"][ind]
        athlete_lastname = df["Nom sportifs"][ind]
        country_flag_filename = df["Pays"][ind]
        country_code = df["Code 3 lettres"][ind]

        # Insert control number
        replace_text(control_number_element, "BALISE " + str(control_number))

        # Insert lock pattern
        lock_pattern_svg = parse(os.path.join(lock_patterns_dir, lock_pattern_filename))
        lock_pattern_root_node = lock_pattern_svg.documentElement.getElementsByTagName(
            "g"
        )[0]
        lock_pattern_element = get_element_by_id(
            layer_1.getElementsByTagName("g"), "Screen_Lock_Pattern"
        )
        layer_1.replaceChild(lock_pattern_root_node, lock_pattern_element)
        lock_pattern_element = get_element_by_id(
            layer_1.getElementsByTagName("g"), "Screen_Lock_Pattern"
        )
        lock_pattern_element.setAttribute(
            "transform", "matrix(0.33333333,0,0,0.33333333,29.333334,29.333333)"
        )
        # color the lock pattern line
        lock_pattern_element.getElementsByTagName("polyline")[0].setAttribute(
            "style", "fill:none;stroke-width:2;stroke:#" + str(color)
        )
        # color the lock pattern circles
        node_list = [int(i) for i in lock_pattern_filename[:-4].split("_")[1]]
        circles = lock_pattern_element.getElementsByTagName("circle")

        node_number = 1
        for circle in circles:
            if node_number in node_list:
                circle.setAttribute("style", "fill:#" + str(color))
            else:
                # circle transparent if not in the pattern
                circle.setAttribute(
                    "style", "fill:#" + str(color) + ";fill-opacity:0.6"
                )
            node_number += 1
        # Color of the lock pattern frame
        lock_pattern_frame_element.setAttribute(
            "style",
            "fill:#ffffff;fill-opacity:1;stroke-width:0.628806;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;stroke:#"
            + str(color),
        )

        # Color of the triangle
        triangle.setAttribute(
            "style",
            "fill-opacity:1;stroke:none;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:0;"
            + "fill:#"
            + str(color),
        )

        # Insert flag
        country_flag_svg = parse(os.path.join(flags_dir, country_flag_filename))
        country_flag_root_node = country_flag_svg.documentElement

        layer_1.removeChild(country_flag_element)
        country_flag_element = template.createElement("g")

        for node in country_flag_root_node.childNodes:
            new_node = node.cloneNode(deep=True)
            country_flag_element.appendChild(new_node)

        country_flag_element.setAttribute("id", "g8192")
        country_flag_element.setAttribute(
            "transform", "matrix(0.030864,0,0,0.030864,6.2845152,30.406448)"
        )
        layer_1.appendChild(country_flag_element)

        # Instert country code
        replace_text(country_code_element, country_code)
        new_code_style = add_style(
            country_code_text_element.getAttribute("style"),
            "fill",
            "#" + str(color),
        )
        country_code_text_element.setAttribute("style", new_code_style)

        # Insert athlete name
        replace_text(athlete_fistname_element, athlete_firstname)
        firstname_style = add_style(
            athlete_fistname_element.getAttribute("style"),
            "fill",
            "#" + str(color),
        )
        athlete_fistname_element.setAttribute("style", firstname_style)

        replace_text(athlete_lastname_element, athlete_lastname)
        lastname_style = add_style(
            athlete_lastname_element.getAttribute("style"),
            "fill",
            "#" + str(color),
        )
        athlete_lastname_element.setAttribute("style", lastname_style)

        # Insert icon
        icon_svg = parse(os.path.join(icons_dir, icon_filename))
        icon_root_node = icon_svg.documentElement

        icon_container_element.removeChild(
            icon_container_element.getElementsByTagName("g")[0]
        )
        icon_element = template.createElement("g")

        for node in icon_root_node.childNodes:
            new_node = node.cloneNode(deep=True)
            icon_element.appendChild(new_node)

        icon_element.setAttribute("id", "g36064")
        icon_element.setAttribute(
            "transform",
            "matrix(0.03726262,0,0,0.03726262,-2.5488306,59.333804)",
        )
        icon_container_element.appendChild(icon_element)

        # Insert addition
        if int(addition) > 0:
            addition = "+" + str(addition)
        else:
            addition = str(addition)
        replace_text(addition_element, addition)
        addition_style = add_style(
            addition_element.getAttribute("style"), "fill", "#" + str(color)
        )
        addition_element.setAttribute("style", addition_style)

        svg_filename = os.path.join(svg_dir_path, str(control_number) + ".svg")

        with open(svg_filename, "w") as f:
            template.writexml(f, encoding="utf-8")


def convert_svg_to_pdf(svg_dir, pdf_dir):
    """Convert svg files to pdf and export text elements to vector
    format. This function uses inksckape command line interface, so
    inkscape sould be installed on the computer.
    """
    svg_files = [f for f in os.listdir(svg_dir)]

    for f in svg_files:
        filename, file_extension = os.path.splitext(f)
        command = (
            "inkscape --export-filename="
            + os.path.join(pdf_dir, filename + ".pdf")
            + " --export-text-to-path --export-plain-svg "
            + os.path.join(svg_dir, f)
        )
        os.system(command)


def remove_black_circles(svg_dir, out_dir):
    """Remove the two black circles on the orienteering markers svg
    files. These circles corresponds to the location of the
    attachment screws."""
    svg_files = [f for f in os.listdir(svg_dir)]

    for f in svg_files:
        template = parse(os.path.join(svg_dir, f))
        rootNode = template.documentElement
        circles = rootNode.getElementsByTagName("circle")
        layer_1 = get_element_by_id(rootNode.getElementsByTagName("g"), "layer1")
        circle_1 = get_element_by_id(circles, "path50521")
        circle_2 = get_element_by_id(circles, "path50521-2")
        layer_1.removeChild(circle_1)
        layer_1.removeChild(circle_2)

        with open(os.path.join(out_dir, f), "w") as file:
            template.writexml(file, encoding="utf-8")


def add_margin_to_svg(svg_dir, out_dir, margin):
    """Add a margin around the svg file.
    
    svg_dir -- input directory
    out_dir -- output directory
    margin -- The margin to be added in mm
    """

    svg_files = [f for f in os.listdir(svg_dir)]

    for f in svg_files:
        template = parse(os.path.join(svg_dir, f))
        rootNode = template.documentElement

        # Modify width
        width = rootNode.getAttribute("width")
        new_width = int(width[:-2]) + 2 * margin
        rootNode.setAttribute("width", str(new_width) + "mm")

        # Modify height
        height = rootNode.getAttribute("height")
        new_height = int(height[:-2]) + 2 * margin
        rootNode.setAttribute("height", str(new_height) + "mm")

        # Modify viewBox
        new_viewBox = "0 0 " + str(new_width) + " " + str(new_height)
        rootNode.setAttribute("viewBox", new_viewBox)

        # Translate the svg content so it is on the center of the
        # viewBox
        layer_1 = get_element_by_id(rootNode.getElementsByTagName("g"), "layer1")
        layer_1.setAttribute(
            "transform", "translate(" + str(margin) + "," + str(margin) + ")"
        )

        with open(os.path.join(out_dir, f), "w") as file:
            template.writexml(file, encoding="utf-8")

def text_to_vector(in_dir, out_dir):
    """Export text elements to vector
    format. This function uses inksckape command line interface, so
    inkscape sould be installed on the computer.
    """
    svg_files = [f for f in os.listdir(in_dir)]

    count = 0
    length = len(svg_files)

    # Create "out_dir" directory if it don't already exists
    if not os.path.exists(out_dir):
        os.makedirs(out_dir)

    for f in svg_files:
        filename, file_extension = os.path.splitext(f)
        command = (
            "inkscape --export-filename="
            + os.path.join(out_dir, filename + ".svg")
            + " --export-text-to-path --export-plain-svg "
            + os.path.join(in_dir, f)
        )
        os.system(command)

        count += 1
        print(f'{count} files dones under a total of {length}'.)

if __name__ == "__main__":
    # generate_svg_markers(
    #     'liste_balises.xlsx'
    #     'liste_balises',
    #     'country_flags',
    #     'faune_flore',
    #     'lock_patterns',
    #     'template_plaquette.svg',
    # )
    text_to_vector(
        os.path.join("final", "svg_5mm_margin"),
        os.path.join("final", "svg_5mm_margin_vector_text"),
    )